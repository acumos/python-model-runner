{
  "comments": [
    {
      "key": {
        "uuid": "a9f793be_13eb6469",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-08T20:43:37Z",
      "side": 0,
      "message": "Believe a wait period (make sure all models loaded) was necessary for some bigger loads (e.g. image classifier).  It blocks subsequent action until all processes are spun up.  Unless this is nested somewhere, it\u0027s a loss of functionality.",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ec98815_27e707f4",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-08T21:41:31Z",
      "side": 0,
      "message": "I\u0027m not sure that I follow here. If a single worker is ready to proceed, why would we artificially delay loading the server?",
      "parentUuid": "a9f793be_13eb6469",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "315f372f_ffe0b509",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-09T15:32:23Z",
      "side": 0,
      "message": "Sorry, I mis-remembered the intention of this code.  It was to be able to use the server programatically (see above) instead of just via command-line.  It initially related to proper shutdown and check of failed start-up timing in a unit test. You can ack this comment as long as unit tests with actual flask server are accomplished.  Using actual flask server was sanity check against changes that may cause it to hang or endlessly loop if timeout value was too short (e.g. for big model loads).",
      "parentUuid": "2ec98815_27e707f4",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6be5bc1_9c687d14",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-09T17:11:36Z",
      "side": 0,
      "message": "There are a couple of topics packed in here. \n\nFirst, I don\u0027t think we should add a public API for programmatic running if its only usage is for a unit test. The unit test should test the actual CLI usage by end-users (which is probably just the entrypoint of a docker image). \n\nSecond, if another concern is endless looping due to loading a big model, we can use Gunicorn hooks to terminate the application (http://docs.gunicorn.org/en/stable/settings.html#worker-abort). \n\nUpon further inspection, this code will loop infinitely if the counter is not decremented. Why not just have a very large timeout?",
      "parentUuid": "315f372f_ffe0b509",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "822f9d16_f99e1e4e",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-10T13:23:06Z",
      "side": 0,
      "message": "re: API\nsure, the previous unit test was hammering on the timeout setting, which may not need to be because it comes directly from the other library.\n\nre: termination\nThis link is not an exact match .  Now that there is an API to launch a server (in the main runner script), how can we terminate the server with a single programatic call?  I don\u0027t have a specific use case in mind here, but maybe the developer wants to kill and restart a different server, as an example.  Admittedly, there are diminishing returns from this thread.\n\nre: loop decrement\nThe counter was to (a) gate until all processes were started and (b) kill the server, nothing more.",
      "parentUuid": "e6be5bc1_9c687d14",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70cfe66a_0d20eb47",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-10T14:36:17Z",
      "side": 0,
      "message": "re: termination\nI believe this callback is executed in the master process, so you can kill remaining children using the gunicorn API and exit.\n\nThe application can be stopped by sending a sigint to the process, or using the Arbiter API. However without a concrete use case I\u0027m reluctant to add more features / complexity to the project for stopping the server with a native Python API.\n\nI\u0027d suggest that the developer create a one-off script for managing multiple processes and using system calls.",
      "parentUuid": "822f9d16_f99e1e4e",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4d1e2ee_5ced40b7",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-08T20:43:37Z",
      "side": 0,
      "message": "Not sure forwarding loss is acceptable.  Has it been moved elsewhere?",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6187d8f8_a1803815",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-08T21:41:31Z",
      "side": 0,
      "message": "I removed forwarding because it was an overly-complex feature that seemed to be trying to compensate for a lack of Acumos runtime. IMO the same functionality can be achieved more generally in a sidecar microservice that interacts with a broker or another downstream node on behalf of the model runner. The added benefit is that a single forwarder implementation can be reused for any model runner implementation that conforms to the (simpler) API. This was discussed in the new model runner API proposal doc.",
      "parentUuid": "e4d1e2ee_5ced40b7",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e73ab45f_c2972537",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-09T15:32:23Z",
      "side": 0,
      "message": "Side car may be acceptable, but we need some intermediate solution.  As per above, if multiple runners could be instantiated in code (e.g. dev writes module that instantiates multiple runners, each with a model of choice), that may be acceptable but it places burden on developers to create such a model.   I assume this is also the exact implementation proposed for a side car.\n\nre: proposal\nDocumented in API but may be hard to execute if not parallel.  By killing this functionality and not having implemented side car there will be a vacuum for forward testing.  Additionally, don\u0027t other runners allow trivially forwarding still?",
      "parentUuid": "6187d8f8_a1803815",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2756b03_2560b6f6",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-09T17:11:36Z",
      "side": 0,
      "message": "An intermediate solution could be a one-off script tucked in the examples folder. Regarding developer burden, I\u0027m not aware of any concrete use cases that rely on this forwarding feature. Also, isn\u0027t this the purpose of the Model Connector component in Acumos?\n\nOther runners are basically implemented in an ad-hoc manner, this is the first attempt at standardizing model runners.\n\nIMO adding HTTP forwarding is very application-specific, and needlessly complicates the API and its semantics. Why not add downstream end points for Spark Streaming, Kafka, ZMQ, etc.? What are the semantics of a request that forwards to 3 downstream nodes, and 1 fails due to a timeout or network failure? These are the concerns of a system made for transporting messages.",
      "parentUuid": "e73ab45f_c2972537",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa52e4ce_28d137a2",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-10T13:23:06Z",
      "side": 0,
      "message": "Okay, almost ready to let it pass.  However, it would be great if there was still a way to test/use forwarding outside of the onion layers of a docker image and model connector from Acumos.  The idea of a nested example to load up arbitrary models (e.g. just provide an array of directories) and allow a one-to-one cascade is amenable.  Nothing more complex is required/requested.",
      "parentUuid": "a2756b03_2560b6f6",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29fffc03_bbf15799",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-10T14:36:17Z",
      "side": 0,
      "message": "Sure, I could create such an example. I\u0027m fine with adding \"recipes\" outside the core scope of the model runner. My goal is to avoid bloating the project to account for the long tail of use cases.",
      "parentUuid": "fa52e4ce_28d137a2",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eae965e_376ef531",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-08T20:43:37Z",
      "side": 0,
      "message": "It was nice to have \u0027main\u0027 for local testing.",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5906dc6d_b55b4549",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-08T21:41:31Z",
      "side": 0,
      "message": "Lol perhaps, but this is a module in a library that\u0027s not intended to be executed directly, so it got axed. You can still import the desired object in a unit test and execute that.",
      "parentUuid": "2eae965e_376ef531",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f7b4e9_a760938f",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-09T15:32:23Z",
      "side": 0,
      "message": "Sorry, for specificity demand, but what is the import, the \u0027ModelRunner\u0027 test class?",
      "parentUuid": "5906dc6d_b55b4549",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ab56b4a_dbdad92b",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-09T17:11:36Z",
      "side": 0,
      "message": "The ModelRunner class in acumos_model_runner/tests/runner_helper.py is just a simple context manager that controls a child process that is using the model runner CLI. You could use it directly, or the more convenient _run_model function in test_runner.py (although then we should factor that as a public testing utility).",
      "parentUuid": "b2f7b4e9_a760938f",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7924ca4b_d03e61aa",
        "filename": "acumos_model_runner/runner.py",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-10T13:23:06Z",
      "side": 0,
      "message": "Ack",
      "parentUuid": "2ab56b4a_dbdad92b",
      "revId": "701ca73e33bd887f0211e1b003fcd39d6688d4bc",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": false
    }
  ]
}