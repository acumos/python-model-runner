{
  "comments": [
    {
      "key": {
        "uuid": "f33323d2_50195798",
        "filename": "acumos_model_runner/api.py",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-10T13:23:06Z",
      "side": 1,
      "message": "Pulling in from other comment, please add the CORS compliance header.\n\n---\nTo confirm, you\u0027re saying to include Access-Control-Allow-Origin: * to the response header for each request? FYI this handler is implemented in acumos_model_runner.api.methods\n---",
      "revId": "0edef3285cc2e7099a46811ccca5728295e24f30",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60c42d7a_b59afe4f",
        "filename": "acumos_model_runner/api.py",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-10T14:36:17Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a safe assumption to always have Access-Control-Allow-Origin: *. People may want control over the origin. \n\nFurther, is this something that should even be a feature of a model runner? Why not delegate this concern to a more appropriate system, like nginx, docker swarm, or kubernetes? Is adding this CORS feature just compensating for lack of proper infrastructure again, akin to forwarding?",
      "parentUuid": "f33323d2_50195798",
      "revId": "0edef3285cc2e7099a46811ccca5728295e24f30",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84ff5884_8e9ff9e7",
        "filename": "acumos_model_runner/api.py",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 10
      },
      "writtenOn": "2018-08-10T14:51:45Z",
      "side": 1,
      "message": "As used in the Acumos platform, the model runner will never be directly exposed.  For that reason, constricting access seems precarious at best -- we already saw performance issues when running in a docker image vs. localhost vs. remote host.  You\u0027re completely right that additional restrictions should be the job of other layers, so that\u0027s why we need to keep these headers from a deep internal layer. (e.g. the model runner) as liberal as possible.",
      "parentUuid": "60c42d7a_b59afe4f",
      "revId": "0edef3285cc2e7099a46811ccca5728295e24f30",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04c566db_6d23d79c",
        "filename": "acumos_model_runner/api.py",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 16
      },
      "writtenOn": "2018-08-10T15:16:39Z",
      "side": 1,
      "message": "I\u0027m confused. CORS becomes a problem only when interacting with a model runner from a browser, right? If there was a reverse proxy being used for a given origin, the model runner could be used directly via a HTTP proxy without any issues due to SOP. \n\nSo adding CORS features to the model runner would only be for supporting direct browser \u003c--\u003e runner communication, which I\u0027m questioning. A single model runner should probably never be interacting with a browser directly, especially because these are CPU-bound operations that block other requests.",
      "parentUuid": "84ff5884_8e9ff9e7",
      "revId": "0edef3285cc2e7099a46811ccca5728295e24f30",
      "serverId": "655300a2-7a56-4504-9153-881edd907bea",
      "unresolved": true
    }
  ]
}